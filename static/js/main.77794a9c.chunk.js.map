{"version":3,"sources":["firebase.js","App.tsx","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","App","useState","location","setLocation","data","setData","ref","on","snapshot","newVal","val","name","console","log","style","width","height","position","left","top","backgroundColor","color","zIndex","url","title","locationChanged","epubcifi","showToc","tocChanged","toc","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8OAeAA,gBAZuB,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMV,IAAMC,EAAWT,aC0DTU,MA7Df,WAKE,IALa,EASmBC,mBAAS,IAT5B,mBASNC,EATM,KASIC,EATJ,OAqBWF,mBAAS,WArBpB,mBAqBNG,EArBM,KAqBAC,EArBA,KA6Bb,OANAN,EAASO,IAAI,sBAAsBC,GAAG,SAAS,SAACC,GAC9C,IAAMC,EAASD,EAASE,MAAMC,KAC1BP,GAAQK,GAAQJ,EAAQI,MAE9BG,QAAQC,IAAIT,GAGV,yBAAKU,MAAO,CAACC,MAAM,OAAQC,OAAO,SAChC,yBAAKF,MAAO,CACVG,SAAS,QACTC,KAAM,EACNC,IAAK,EACLC,gBAAgB,UAChBC,MAAO,QACPN,MAAO,QACPC,OAAO,QACPM,QAAS,IARX,WAUWlB,GAKX,kBAAC,cAAD,CACEmB,IAAI,iEACJC,MAAM,sBACNtB,SAAUA,GAAU,KACpBuB,gBAAiB,SAACC,GAChBd,QAAQC,IAAI,cAAea,GAC3BvB,EAAYuB,IAEdC,SAAS,EACTC,WAAY,SAACC,GAAD,OAAiBjB,QAAQC,IAAIgB,QCzD7BC,QACW,cAA7BC,OAAO7B,SAAS8B,UAEe,UAA7BD,OAAO7B,SAAS8B,UAEhBD,OAAO7B,SAAS8B,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.77794a9c.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\"\r\nimport 'firebase/database'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAg4ELim3IfNA3oYC7tbRsO6jpFvMAlf3Y\",\r\n  authDomain: \"marginalia-94238.firebaseapp.com\",\r\n  databaseURL: \"https://marginalia-94238.firebaseio.com\",\r\n  projectId: \"marginalia-94238\",\r\n  storageBucket: \"marginalia-94238.appspot.com\",\r\n  messagingSenderId: \"802074060077\",\r\n  appId: \"1:802074060077:web:19b8a214fcfbf0b679dfa4\",\r\n  measurementId: \"G-NTY3WV57T7\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig); \r\n\r\nexport const database = firebase.database()","import React, {useState, useEffect} from 'react';\r\nimport { ReactReader, EpubView } from \"react-reader\";\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { database } from './firebase';\r\n//import Aside from './Aside'\r\n\r\nfunction CoolComponent(props: {name: string}) {\r\n  // console.log('props is', props)\r\n\r\n  return <div>{props.name} is super cool</div>\r\n\r\n}\r\n\r\nfunction App() {\r\n  // TODO: Currently trying to add this function to render a sidebar in preparation for commenting\r\n  // Stuck on working out what object to pass to this function that has the attributes target, children, moveDown\r\n  //Aside({target: null, children: 'blah2', moveDown: 'blah3' });\r\n\r\n  const onLocationChanged = (newLocation: string) => {\r\n    console.log('new location', newLocation)\r\n  }\r\n\r\n  const [location, setLocation] = useState(\"\")\r\n\r\n  // CoolComponent({\r\n  //   name: \"asjkdfhaksjdhf\"\r\n  // })\r\n\r\n  // EpubView({\r\n  //   url: \"https://s3.amazonaws.com/epubjs/books/moby-dick/OPS/package.opf\",\r\n  //   title: \"Moby Dick\",\r\n  //   // ....\r\n  // })\r\n\r\n  const [data, setData] = useState('loading')\r\n\r\n  database.ref('/Books/Guru Papers').on('value', (snapshot) => {\r\n    const newVal = snapshot.val().name\r\n    if (data != newVal) setData(newVal)\r\n  });\r\n  console.log(data)\r\n\r\n  return (\r\n    <div style={{width:\"100%\", height:\"100%\"}}>\r\n      <div style={{\r\n        position:'fixed',\r\n        left: 0,\r\n        top: 0,\r\n        backgroundColor:'hotpink',\r\n        color: 'black',\r\n        width: '300px',\r\n        height:'500px',\r\n        zIndex: -1,\r\n      }}>\r\n        Data is {data}\r\n      </div>\r\n\r\n      {/*}* Container needs a height..*/}\r\n      {/* url=\"https://s3.amazonaws.com/epubjs/books/moby-dick/OPS/package.opf\" */}\r\n      <ReactReader\r\n        url=\"https://gerhardsletten.github.io/react-reader/files/alice.epub\"\r\n        title=\"Alice in Wonderland\"\r\n        location={location||null}\r\n        locationChanged={(epubcifi: string) => {\r\n          console.log('navigate to', epubcifi)\r\n          setLocation(epubcifi)\r\n        }}\r\n        showToc={true}\r\n        tocChanged={(toc: string) => console.log(toc)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n// window.firebase = firebase\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}